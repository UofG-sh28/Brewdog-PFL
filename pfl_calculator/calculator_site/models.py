from datetime import date

from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MaxValueValidator, MinValueValidator
from django.utils import timezone


class Business(models.Model):
    """This model represents a user's business,
        stores information about the Business' location, size, details and contacts.

        Primary Key:
            id - Uses auto ID as primary_key

        Dependencies:
            user - Each Business 'belongs' to one user.

        Fields:
            company_name - Required
            business_address - Optional
            area_type - Optional, choice
            part_of_world - Optional, choice
            business_type - Optional, choice
            contact_number - Optional
            contact_email - Optional
            business_size - Optional, choice
        """
    # Choices,
    # Using shortened names to keep tables clean, use get_FIELDNAME_display() for verbose names
    # These choices are just taken from excel sheet, easily altered.
    AREA_TYPES = (
        ("C", "Inner City"),
        ("U", "Urban"),
        ("R", "Rural"),
    )
    PARTS_OF_WORLD = (
        ("UK", "UK"),
        ("EU", "Europe"),
        ("NA", "North America"),
        ("GL", "Global"),
    )
    BUSINESS_TYPES = (
        ("BNFNA", "Bar (no food, no accomodation)"),
        ("BNA", "Bar (serving food, no accomodation)"),
        ("R", "Restaurant"),
        ("HNF", "Hotel (no food)"),
        ("H", "Hotel (serving Food)"),
    )
    BUSINESS_TURNOVERS = (
        ("S", "£100k-£500k"),
        ("M", "£500k-£10,000k"),
        ("L", "Over £10,000k"),
    )
    # FK
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    # FIELDS
    company_name = models.CharField(max_length=50, unique=True)
    business_address = models.CharField(max_length=150)
    area_type = models.CharField(max_length=1, choices=AREA_TYPES)
    part_of_world = models.CharField(max_length=2, choices=PARTS_OF_WORLD)
    business_type = models.CharField(max_length=5, choices=BUSINESS_TYPES)
    contact_number = models.CharField(max_length=15)
    contact_email = models.EmailField(max_length=150)
    business_size = models.CharField(max_length=1, choices=BUSINESS_TURNOVERS)

    class Meta:
        verbose_name = "Business"
        verbose_name_plural = "Businesses"

    def __str__(self):
        return self.company_name

    def save(self, *args, **kwargs):
        super(Business, self).save(*args, **kwargs)


class BusinessMetrics(models.Model):
    """ This stores a business' yearly metrics BusinessMetrics.

    Primary Key:
        id - uses auto id

    Dependencies:
        business - each business has metrics for each year.

    Fields:
        year - Optional
        operating_months - Optional
        weekly_openings - Optional
        annual_meals - Optional
        annual_drinks - Optional
        annual_customers - Optional
        revenue - Optional."""

    # FK
    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    # FIELDS
    year = models.IntegerField()
    operating_months = models.IntegerField()
    weekly_openings = models.IntegerField()
    annual_meals = models.IntegerField()
    annual_drinks = models.IntegerField()
    annual_customers = models.IntegerField()
    revenue = models.IntegerField()

    class Meta:
        verbose_name = "Business Metric"
        verbose_name_plural = "Business Metrics"

    def save(self, *args, **kwargs):
        super(BusinessMetrics, self).save(*args, **kwargs)


class CarbonFootprint(models.Model):
    """This stores a User's carbon footprint which is created by caclulator.

    Primary Key:
        id - uses auto id

    Dependencies:
        user
        business

    Fields:
        business - Required, FK
        year - Required
        All the calculator fields, storing the amount of carbon generated by each field."""

    # ForeignKey
    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    # OTHER FIELDS
    year = models.IntegerField()
    # CALCULATOR FIELDS
    mains_gas = models.FloatField(default=-1)
    fuel = models.FloatField(default=-1)
    oil = models.FloatField(default=-1)
    coal = models.FloatField(default=-1)
    wood = models.FloatField(default=-1)
    grid_electricity = models.FloatField(default=-1)
    grid_electricity_LOWCARBON = models.FloatField(default=-1)
    waste_food_landfill = models.FloatField(default=-1)
    waste_food_compost = models.FloatField(default=-1)
    waste_food_charity = models.FloatField(default=-1)
    bottles_recycle = models.FloatField(default=-1)
    aluminum_can_recycle = models.FloatField(default=-1)
    general_waste_landfill = models.FloatField(default=-1)
    general_waste_recycle = models.FloatField(default=-1)
    special_waste = models.FloatField(default=-1)
    goods_delivered_company_owned = models.FloatField(default=-1)
    goods_delivered_contracted = models.FloatField(default=-1)
    travel_company_business = models.FloatField(default=-1)
    flights_domestic = models.FloatField(default=-1)
    flights_international = models.FloatField(default=-1)
    staff_commuting = models.FloatField(default=-1)
    beef_lamb = models.FloatField(default=-1)
    other_meat = models.FloatField(default=-1)
    lobster_prawn = models.FloatField(default=-1)
    fin_fish_seafood = models.FloatField(default=-1)
    milk_yoghurt = models.FloatField(default=-1)
    cheeses = models.FloatField(default=-1)
    fruit_veg_local = models.FloatField(default=-1)
    fruit_veg_other = models.FloatField(default=-1)
    dried_food = models.FloatField(default=-1)
    beer_kegs = models.FloatField(default=-1)
    beer_cans = models.FloatField(default=-1)
    beer_bottles = models.FloatField(default=-1)
    beer_kegs_LOWCARBON = models.FloatField(default=-1)
    beer_cans_LOWCARBON = models.FloatField(default=-1)
    beer_bottles_LOWCARBON = models.FloatField(default=-1)
    soft_drinks = models.FloatField(default=-1)
    wine = models.FloatField(default=-1)
    spirits = models.FloatField(default=-1)
    kitchen_equipment_assets = models.FloatField(default=-1)
    building_repair_maintenance = models.FloatField(default=-1)
    cleaning = models.FloatField(default=-1)
    IT_Marketing = models.FloatField(default=-1)
    main_water = models.FloatField(default=-1)
    sewage = models.FloatField(default=-1)

    class Meta:
        verbose_name = "Carbon Footprint"
        verbose_name_plural = "Carbon Footprints"

    def __str__(self):
        try:
            verbose = f"{self.business.company_name}'s Carbon Footprint for {self.year}"
            return verbose
        except:
            return "Carbon Footprint"

    def save(self, *args, **kwargs):
        super(CarbonFootprint, self).save(*args, **kwargs)


class Pledge(models.Model):
    """
        This stores a singular pledge, its category and the fields upon which it affects.

        Primary Key:
            id - uses auto id

        Dependencies:
            N/A

        Fields:
            category - limited choice
            text - describes pledge
            boolean - If YES pledge is 0 OR 100 if NO pledge is 0-100
            fields - comma seperated list of fields effected.
    """

    CATEGORY_CHOICE = (
        ("E", "Energy"),
        ("F", "Food"),
        ("B", "Beer"),
        ("W", "Waste"),
        ("T", "Travel"),
        ("O", "Operations"),
        ("M", "Miscellaneous")
    )

    category = models.CharField(max_length=1, choices=CATEGORY_CHOICE)
    text = models.CharField(max_length=150)

    def __str__(self):
        try:
            return f"{self.get_category_display()}: {self.text}"
        except:
            return "Error: Pledge text not found."

    class Meta:
        verbose_name = "Pledge"
        verbose_name_plural = "Pledges"

    def save(self, *args, **kwargs):
        super(Pledge, self).save(*args, **kwargs)


class ActionPlan(models.Model):
    """
        Action Plan stores a business's Action Plan containing their selected Pledges

        Primary Key:
            id - Would ideally be {business, year} but django does not support this :)

        Dependencies:
            business - belongs to a business

        Fields:
            business - ForeignKey
            year - year of ActionPlan
            selected_pledges - many to many SelectedPledge
    """
    ACTION_CHOICES = ((0, "0%"), (10, "10%"), (20, "20%"), (30, "30%"), (40, "40%"), (50, "50%"), (60, "60%"),
                      (70, "70%"), (80, "80%"), (90, "90%"), (100, "100%"))

    class Meta:
        unique_together = (('business', 'year'),)
        verbose_name = "Action Plan"
        verbose_name_plural = "Action Plans"

    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    year = models.IntegerField()

    # fields:
    reduce_electricity = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                             validators=[MinValueValidator(0), MaxValueValidator(100)])
    switch_electricity = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                             validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_gas = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                     validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_oil = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                     validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_coal = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_wood = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    energy_audit = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                       validators=[MinValueValidator(0), MaxValueValidator(100)])
    swap_beef_lamb_for_non_meat = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    swap_beef_lamb_for_other_meat = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                        validators=[MinValueValidator(0), MaxValueValidator(100)])
    swap_other_meat_for_non_meat = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                       validators=[MinValueValidator(0), MaxValueValidator(100)])
    replace_fruit_veg = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                            validators=[MinValueValidator(0), MaxValueValidator(100)])
    detailed_menu = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                        validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_food_waste = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                            validators=[MinValueValidator(0), MaxValueValidator(100)])
    waste_audit = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    switch_hc_beer_for_lc_beer = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                     validators=[MinValueValidator(0), MaxValueValidator(100)])
    switch_bottle_beer_for_kegs = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    switch_bottle_beer_for_cans = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    switch_canned_beer_for_kegs = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_general_waste = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                               validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_vehicle_travel_miles = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                      validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_commuting_miles = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                 validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_staff_flights = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                               validators=[MinValueValidator(0), MaxValueValidator(100)])
    reduce_emissions = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                           validators=[MinValueValidator(0), MaxValueValidator(100)])
    adopt_sustainable_diposable_items = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                            validators=[MinValueValidator(0), MaxValueValidator(100)])
    sustainably_procure_equipment = models.IntegerField(default=0, choices=ACTION_CHOICES,
                                                        validators=[MinValueValidator(0), MaxValueValidator(100)])

    def __str__(self):
        return f"{self.business.company_name}'s Action Plan for {self.year}"

    def save(self, *args, **kwargs):
        super(ActionPlan, self).save(*args, **kwargs)


class Feedback(models.Model):
    """
        Feedback stores a user's Feedback containing their selected Pledges

        Primary Key:
            id - Unique generated increasing id

        Dependencies:
            User - Each Feedback 'belongs' to one user.

        Fields:
            user - ForeignKey
            feedback - one to many
    """
    Rate = ((0, "Strongly Agree"), (10, "Agree"), (20, "Unsure"), (30, "Disagree"), (40, "Strongly Disagree"))
    user = models.OneToOneField(User, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Feedback"
        verbose_name_plural = "Feedback"

    # fields:
    had_enough_information = models.IntegerField(default=0, choices=Rate,
                                                 validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_had_enough_information = models.CharField(default="", max_length=150)

    scope_was_useful = models.IntegerField(default=0, choices=Rate,
                                           validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_scope_was_useful = models.CharField(default="", max_length=150)

    able_to_find_info = models.IntegerField(default=0, choices=Rate,
                                            validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_able_to_find_info = models.CharField(default="", max_length=150)

    calculator_ware_clear = models.IntegerField(default=0, choices=Rate,
                                                validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_calculator_ware_clear = models.CharField(default="", max_length=150)

    question_were_relevant = models.IntegerField(default=0, choices=Rate,
                                                 validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_question_were_relevant = models.CharField(default="", max_length=150)

    graphics_ware_clear = models.IntegerField(default=0, choices=Rate,
                                              validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_graphics_ware_clear = models.CharField(default="", max_length=150)

    pledge_were_relevant = models.IntegerField(default=0, choices=Rate,
                                               validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_pledge_were_relevant = models.CharField(default="", max_length=150)

    cut_emissions = models.IntegerField(default=0, choices=Rate,
                                        validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_cut_emissions = models.CharField(default="", max_length=150)

    action_plan_clear_use = models.IntegerField(default=0, choices=Rate,
                                                validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_action_plan_clear_use = models.CharField(default="", max_length=150)

    aware_of_carbon_impacts = models.IntegerField(default=0, choices=Rate,
                                                  validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_aware_of_carbon_impacts = models.CharField(default="", max_length=150)

    confident_able_to_complete = models.IntegerField(default=0, choices=Rate,
                                                     validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_confident_able_to_complete = models.CharField(default="", max_length=150)

    know_climate_change = models.IntegerField(default=0, choices=Rate,
                                              validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_know_climate_change = models.CharField(default="", max_length=150)

    actions_improve_business = models.IntegerField(default=0, choices=Rate,
                                                   validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_actions_improve_business = models.CharField(default="", max_length=150)

    customer_exercise = models.IntegerField(default=0, choices=Rate,
                                            validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_customer_exercise = models.CharField(default="", max_length=150)

    all_stores_complete_exercise = models.IntegerField(default=0, choices=Rate,
                                                       validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_all_stores_complete_exercise = models.CharField(default="", max_length=150)

    climate_change_emergency = models.IntegerField(default=0, choices=Rate,
                                                   validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_climate_change_emergency = models.CharField(default="", max_length=150)

    want_to_find_out_climate_change = models.IntegerField(default=0, choices=Rate,
                                                          validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_want_to_find_out_climate_change = models.CharField(default="", max_length=150)

    opportunities_to_supplier = models.IntegerField(default=0, choices=Rate,
                                                    validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_opportunities_to_supplier = models.CharField(default="", max_length=150)

    calculator_too_hard = models.IntegerField(default=0, choices=Rate,
                                              validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_calculator_too_hard = models.CharField(default="", max_length=150)

    happy_to_talk = models.IntegerField(default=0, choices=Rate,
                                        validators=[MinValueValidator(0), MaxValueValidator(40)])
    comment_happy_to_talk = models.CharField(default="", max_length=150)

    def __str__(self):
        return f"{self.user}'s Feedback"

    def save(self, *args, **kwargs):
        super(Feedback, self).save(*args, **kwargs)

class ActionPlanDetail(models.Model):
    """
        ActionPlanDetail stores a user's ActionPlanDetails/Action Plan containing their selected Pledges

        Primary Key:
            id - Unique generated increasing id

        Dependencies:
            Business
            Year

        Fields:

    """
    Months = (
    (1, "January"), (2, "February"), (3, "March"), (4, "April"), (5, "May"), (6, "June"), (7, "July"), (8, "August"),
    (9, "September"), (10, "October"), (11, "November"), (12, "December"))

    class Meta:
        verbose_name = "Action Plan Detail"
        verbose_name_plural = "Action Plan Details"

    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    year = models.IntegerField()

    ownership = models.CharField(default="", max_length=200)
    start_date = models.DateField(default=date.today())
    end_date = models.DateField(default=date.today())
    text = models.CharField(default="", max_length=200)

    plan_detail = models.TextField(default="", max_length=200)

    def __str__(self):
        return f"{self.business.company_name}'s Action Plan Detail for {self.year}"

    def save(self, *args, **kwargs):
        super(ActionPlanDetail, self).save(*args, **kwargs)