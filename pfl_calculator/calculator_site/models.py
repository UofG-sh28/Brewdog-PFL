from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MaxValueValidator, MinValueValidator

class Business(models.Model):
    """This model represents a user's business,
        stores information about the Business' location, size, details and contacts.

        Primary Key:
            id - Uses auto ID as primary_key

        Dependencies:
            user - Each Business 'belongs' to one user.

        Fields:
            company_name - Required
            business_address - Optional
            area_type - Optional, choice
            part_of_world - Optional, choice
            business_type - Optional, choice
            contact_number - Optional
            contact_email - Optional
            business_size - Optional, choice
        """
    # Choices,
    # Using shortened names to keep tables clean, use get_FIELDNAME_display() for verbose names
    # These choices are just taken from excel sheet, easily altered.
    AREA_TYPES = (
        ("C", "Inner City"),
        ("U", "Urban"),
        ("R", "Rural"),
    )
    PARTS_OF_WORLD = (
        ("UK", "UK"),
        ("EU","Europe"),
        ("NA","North America"),
        ("GL","Global"),
    )
    BUSINESS_TYPES = (
        ("BNFNA", "Bar (no food, no accomodation)"),
        ("BNA", "Bar (serving food, no accomodation)"),
        ("R", "Restaurant"),
        ("HNF", "Hotel (no food)"),
        ("H", "Hotel (serving Food)"),
    )
    BUSINESS_TURNOVERS = (
        ("S", "£100k-£500k"),
        ("M", "£500k-£10,000k"),
        ("L", "Over £10,000k"),
    )
    #FK
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    #FIELDS
    company_name = models.CharField(max_length=50)
    business_address = models.CharField(max_length=150)
    area_type = models.CharField(max_length=1, choices=AREA_TYPES)
    part_of_world = models.CharField(max_length=2, choices=PARTS_OF_WORLD)
    business_type = models.CharField(max_length=5, choices=BUSINESS_TYPES)
    contact_number = models.CharField(max_length=15)
    contact_email = models.EmailField(max_length=150)
    business_size = models.CharField(max_length=1, choices=BUSINESS_TURNOVERS)

    class Meta:
        verbose_name = "Business"
        verbose_name_plural = "Businesses"

    def __str__(self):
        return self.company_name

    def save(self, *args, **kwargs):
        super(Business, self).save(*args, **kwargs)

class BusinessMetrics(models.Model):
    """ This stores a business' yearly metrics BusinessMetrics.

    Primary Key:
        id - uses auto id

    Dependencies:
        business - each business has metrics for each year.

    Fields:
        year - Optional
        operating_months - Optional
        weekly_openings - Optional
        annual_meals - Optional
        annual_drinks - Optional
        annual_customers - Optional
        revenue - Optional."""

    #FK
    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    #FIELDS
    year = models.IntegerField()
    operating_months = models.IntegerField()
    weekly_openings = models.IntegerField()
    annual_meals = models.IntegerField()
    annual_drinks = models.IntegerField()
    annual_customers = models.IntegerField()
    revenue = models.IntegerField()

    class Meta:
        verbose_name = "Business Metric"
        verbose_name_plural = "Business Metrics"

    def save(self, *args, **kwargs):
        super(BusinessMetrics, self).save(*args, **kwargs)

class CarbonFootprint(models.Model):
    """This stores a User's carbon footprint which is created by caclulator.

    Primary Key:
        id - uses auto id

    Dependencies:
        user
        business

    Fields:
        business - Required, FK
        year - Required
        All the calculator fields, storing the amount of carbon generated by each field."""

    # ForeignKey
    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    #OTHER FIELDS
    year = models.IntegerField()
    #CALCULATOR FIELDS
    mains_gas = models.FloatField(default=0.0)
    fuel = models.FloatField(default=0.0)
    oil = models.FloatField(default=0.0)
    coal = models.FloatField(default=0.0)
    wood = models.FloatField(default=0.0)
    grid_electricity = models.FloatField(default=0.0)
    grid_electricity_LOWCARBON = models.FloatField(default=0.0)
    waste_food_landfill = models.FloatField(default=0.0)
    waste_food_compost = models.FloatField(default=0.0)
    waste_food_charity = models.FloatField(default=0.0)
    bottles_recycle = models.FloatField(default=0.0)
    aluminum_can_recycle = models.FloatField(default=0.0)
    general_waste_landfill = models.FloatField(default=0.0)
    general_waste_recycle = models.FloatField(default=0.0)
    special_waste = models.FloatField(default=0.0)
    goods_delivered_company_owned = models.FloatField(default=0.0)
    goods_delivered_contracted = models.FloatField(default=0.0)
    travel_company_business = models.FloatField(default=0.0)
    flights_domestic = models.FloatField(default=0.0)
    flights_international = models.FloatField(default=0.0)
    staff_commuting = models.FloatField(default=0.0)
    beef_lamb = models.FloatField(default=0.0)
    other_meat = models.FloatField(default=0.0)
    lobster_prawn = models.FloatField(default=0.0)
    fin_fish_seafood = models.FloatField(default=0.0)
    milk_yoghurt = models.FloatField(default=0.0)
    cheeses = models.FloatField(default=0.0)
    fruit_veg_local = models.FloatField(default=0.0)
    fruit_veg_other = models.FloatField(default=0.0)
    dried_food = models.FloatField(default=0.0)
    beer_kegs = models.FloatField(default=0.0)
    beer_cans = models.FloatField(default=0.0)
    beer_bottles = models.FloatField(default=0.0)
    beer_kegs_LOWCARBON = models.FloatField(default=0.0)
    beer_cans_LOWCARBON = models.FloatField(default=0.0)
    beer_bottles_LOWCARBON = models.FloatField(default=0.0)
    soft_drinks = models.FloatField(default=0.0)
    wine = models.FloatField(default=0.0)
    spirits = models.FloatField(default=0.0)
    kitchen_equipment_assets = models.FloatField(default=0.0)
    building_repair_maintenance = models.FloatField(default=0.0)
    cleaning = models.FloatField(default=0.0)
    IT_Marketing = models.FloatField(default=0.0)
    main_water = models.FloatField(default=0.0)
    sewage = models.FloatField(default=0.0)

    class Meta:
        verbose_name = "Carbon Footprint"
        verbose_name_plural = "Carbon Footprints"

    def __str__(self):
        try:
            verbose = f"{self.business.company_name}'s Carbon Footprint for {self.year}"
            return verbose
        except:
            return "Carbon Footprint"

    def save(self, *args, **kwargs):
        super(CarbonFootprint, self).save(*args, **kwargs)


class Pledge(models.Model):
    """
        This stores a singular pledge, its category and the fields upon which it affects.

        Primary Key:
            id - uses auto id

        Dependencies:
            N/A

        Fields:
            category - limited choice
            text - describes pledge
            boolean - If YES pledge is 0 OR 100 if NO pledge is 0-100
            fields - comma seperated list of fields effected.
    """

    CATEGORY_CHOICE = (
        ("E","Energy"),
        ("F","Food"),
        ("B","Beer"),
        ("W","Waste"),
        ("T","Travel"),
        ("O","Operations"),
        ("M","Miscellaneous")
    )

    category = models.CharField(max_length=1, choices=CATEGORY_CHOICE)
    text = models.CharField(max_length=150)
    boolean =  models.BooleanField()
    fields = models.CharField(max_length=150)

    def __str__(self):
        try:
            return self.text
        except:
            return "Error: Pledge text not found."

    class Meta:
        verbose_name = "Pledge"
        verbose_name_plural = "Pledges"

    def save(self, *args, **kwargs):
        super(Pledge, self).save(*args, **kwargs)

class ActionPlan(models.Model):
    """
        Action Plan stores a business's Action Plan containing their selected Pledges

        Primary Key:
            id - Would ideally be {business, year} but django does not support this :)

        Dependencies:
            business - belongs to a business

        Fields:
            business - ForeignKey
            year - year of ActionPlan
            selected_pledges - many to many SelectedPledge
    """
    class Meta:
        unique_together = (('business', 'year'),)
        verbose_name = "Action Plan"
        verbose_name_plural = "Action Plans"

    business = models.ForeignKey(Business, on_delete=models.CASCADE)
    year = models.IntegerField()
    selected_pledges = models.ManyToManyField("SelectedPledge", blank=True)

    def __str__(self):
        return f"{self.business.company_name}'s Action Plan for {self.year}"

    def save(self, *args, **kwargs):
        super(ActionPlan, self).save(*args, **kwargs)




class SelectedPledge(models.Model):
    """
        Selected Pledge relationship defines the amount a user has pledged
        Is part of the M2N relationship with ActionPlan

        Primary Key:
            id - uses auto id

        Dependencies:
            ActionPlan - each pledge must belong to an ActionPlan
            Pledge - each pledge is a pledge
            Amount - amount of percentage selected.
    """

    #Fields
    action_plan = models.ForeignKey(ActionPlan, on_delete=models.CASCADE)
    pledge = models.ForeignKey(Pledge, on_delete=models.CASCADE)
    amount = models.IntegerField(default=0, validators=[
        MaxValueValidator(100),
        MinValueValidator(0)
    ])

    def __str__(self):
        return f"{self.pledge.text}: {self.amount}"

    class Meta:
        verbose_name = "Selected Pledge"
        verbose_name_plural = "Selected Pledges"

    def save(self, *args, **kwargs):
        super(SelectedPledge, self).save(*args, **kwargs)
